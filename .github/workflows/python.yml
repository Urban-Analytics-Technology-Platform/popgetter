# This file is autogenerated by maturin v1.7.1
# To update, run
#
#    maturin generate-ci github --manifest-path popgetter-py/Cargo.toml
#
name: Python

on:
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

env:
  # Set to "3.10" here but other versions should work too
  PYTHON_VERSION: "3.10"

jobs:
  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
          - runner: ubuntu-latest
            target: x86
          # TODO: currently fails with: "Could not find directory of OpenSSL installation..."
          # - runner: ubuntu-latest
          #   target: aarch64
          # - runner: ubuntu-latest
          #   target: armv7
          # - runner: ubuntu-latest
          #   target: s390x
          # - runner: ubuntu-latest
          #   target: ppc64le
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: >
            --release
            --manifest-path popgetter-py/Cargo.toml
            --out dist
            --find-interpreter
          sccache: "true"
          # Install openssl as required for popgetter to compile
          # TODO: see dicussion for openssl install for different targets:
          # https://github.com/PyO3/maturin-action/discussions/162#discussioncomment-7978369
          # currently only successful with yum for x86_64 and x86, compilation fails with
          # openssl not found for other targets (tried apt-get and pacman):
          before-script-linux: |
              yum update -y
              yum install -y openssl openssl-devel
          manylinux: auto
      # See: https://github.com/pola-rs/polars/blob/main/.github/workflows/release-python.yml
      - name: Test wheel
        if: matrix.platform.target == 'x86_64'
        run: |
          pip install popgetter --force-reinstall --verbose --find-links dist/
          python -c 'import popgetter'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist

  # TODO: fix CI to run with manylinux: musllinux_1_2
  # musllinux:
  #   runs-on: ${{ matrix.platform.runner }}
  #   strategy:
  #     matrix:
  #       platform:
  #         - runner: ubuntu-latest
  #           target: x86_64
  #         - runner: ubuntu-latest
  #           target: x86
  #         - runner: ubuntu-latest
  #           target: aarch64
  #         - runner: ubuntu-latest
  #           target: armv7
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ env.PYTHON_VERSION }}
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.platform.target }}
  #         args: --release --out dist --find-interpreter --manifest-path popgetter-py/Cargo.toml
  #         sccache: "true"
  #         before-script-linux: |
  #             # TODO: update with package instructions specific to target for openssl
  #             #Â See example: https://github.com/PyO3/maturin-action/discussions/162#discussioncomment-7978369
  #             sudo apt-get update
  #             sudo apt-get install -y pkg-config libssl-dev
  #         manylinux: musllinux_1_2
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-musllinux-${{ matrix.platform.target }}
  #         path: dist

  windows:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
          - runner: windows-latest
            target: x86
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: ${{ matrix.platform.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: >
            --release
            --manifest-path popgetter-py/Cargo.toml
            --out dist
            --find-interpreter
          sccache: "true"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist

  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-15
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: >
            --release
            --manifest-path popgetter-py/Cargo.toml
            --out dist
            --find-interpreter
          sccache: "true"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: >
            --manifest-path popgetter-py/Cargo.toml
            --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  # TODO: uncomment for release to PyPI
  # release:
  #   name: Release
  #   runs-on: ubuntu-latest
  #   if: "startsWith(github.ref, 'refs/tags/')"
  #   needs: [linux, musllinux, windows, macos, sdist]
  #   steps:
  #     - uses: actions/download-artifact@v4
  #     - name: Publish to PyPI
  #       uses: PyO3/maturin-action@v1
  #       env:
  #         MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
  #       with:
  #         command: upload
  #         args: --non-interactive --skip-existing wheels-*/*
